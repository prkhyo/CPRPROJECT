<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.CPR.redHome.mapper.cart.CartMapper">

    <select id="getCartList" resultType="cartDto">

        select m.member_id               as memberId
             , m2.name                   as name
             , p.product_main_image      as mainImageUrl
             , p.product_price           as price
             , c.product_quantity        as quantity
             , p.product_title           as title
             , p.product_delivery_charge as deliveryCharge
             , c.shopping_cart_id        as cartId
             , p.product_id              as productId

        from shopping_cart as c

                 join member m on c.member_id = m.member_id
                 join product p on c.product_id = p.product_id
                 join member m2 on p.member_id = m2.member_id
        where c.member_id = #{memberId}


    </select>


    <delete id="cartDelete" parameterType="java.util.List">

        delete from shopping_cart where shopping_cart_id in

        <foreach collection="list" item="item" separator="," open="(" close=")">
            #{item.cartId}
        </foreach>

    </delete>


    <select id="getPayment" resultType="orderDto">

        select

        c.shopping_cart_id as cartId ,
        c.member_id as memberId,
        p.product_main_image as mainImageUrl,
        m.account_id as accountId,
        p.product_title as title,
        m.grade_id as gradeId,
        m.email as email,
        p.product_id as productId,
        p.product_price as price,
        p.product_delivery_charge as deliveryCharge,
        m2.name as name,
        c.product_quantity as quantity,
        m.point as currentPoint,
        g.accumulation_rate as accumulationRate

        from shopping_cart as c
        left join member m on c.member_id = m.member_id
        left join grade g on m.grade_id = g.grade_id
        left join product p on c.product_id = p.product_id
        join member m2 on p.member_id = m2.member_id


        where shopping_cart_id IN
        <foreach collection="list" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>

    </select>

    <select id="findMemberId" resultType="int">

        select m.point as currentPoint
        from shopping_cart c
                 join member m on m.member_id = c.member_id
        where c.shopping_cart_id = #{memberId}


    </select>

    <insert id="insertOrders" parameterType="List">
        insert into orders (
        order_number,
        member_id,
        product_id,
        order_receiver,
        order_unit_price,
        order_delivery_charge,
        order_point_used,
        order_request,
        order_address,
        phone_number,
        order_product_quantity ) values


        <foreach collection="list" item="item" separator=",">
            (
            #{item.orderNo},
            #{item.memberId},
            #{item.productId},
            #{item.receiver},
            #{item.price},
            #{item.deliveryCharge},
            #{item.usedPoint},
            #{item.orderRequest},
            #{item.address},
            #{item.phoneNumber},
            #{item.quantity}
            )
        </foreach>

    </insert>

    <update id="deductedPoint" parameterType="orderDto">


        update member as b, (select point from member where member_id = ${memberId} ) as a, product as p
        set b.point = a.point - ${usedPoint}, p.product_quantity = p.product_quantity - ${quantity}
        where p.product_id = ${productId}
          and b.member_id = ${memberId}


    </update>

    <update id="addPoint" parameterType="orderDto">
        update member
        set point = point + ${addPoint}
        where member_id = ${memberId}

    </update>

</mapper>